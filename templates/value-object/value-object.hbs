import { ValueObject, Result } from 'types-ddd';

interface Props {
	value: {{lowerCase type}}
}

export class {{pascalCase name}}ValueObject extends ValueObject<Props>{
	private constructor(props: Props) {
		super(props)
	}

	get value(): {{lowerCase type}} {
		return this.props.value;
	}

	public static isValidValue(value: {{lowerCase type}}): boolean {
		// your logic to validate value here
		return value !== undefined;
	}

	public static create(value: {{lowerCase type}}): Result<{{pascalCase name}}ValueObject> {
		const isValid = {{pascalCase name}}ValueObject.isValidValue(value);

		if (!isValid) {
			return Result.fail('your error message here');
		}

		return Result.ok(new {{pascalCase name}}ValueObject({ value }));
	}
}

export default {{pascalCase name}}ValueObject;
